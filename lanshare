#!/usr/bin/python3
import sys, socket
from zeroconf import ServiceInfo, Zeroconf
from time import sleep

def serve(dirname=None):
    """
    Register as a zeroconf/Bonjour service and serves files in dirname directory
    if dirname is missing, it serves files from the current working directory.
    """
    # Register with the Zeroconf/Bonjour daemon
    hostname = socket.gethostname()
    desc = {'path': '/'}
    info = ServiceInfo("_lanshare._tcp.local.",
            "LS-{0}._lanshare._tcp.local.".format(hostname),
            socket.inet_aton("127.0.0.1"),
            80, 0, 0,
            desc,
            "{0}.local.".format(hostname))

    zeroconf = Zeroconf()
    print("Press Ctrl-C to stop sharing...")
    zeroconf.register_service(info)

    # Here is where we will serve the files
    try:
        while True:
            sleep(0.1)
    except KeyboardInterrupt:
        # Stop on Ctrl+C
        pass
    finally:
        # De-register the service
        zeroconf.unregister_service(info)
        zeroconf.close()

def list_hosts():
    """
    Scans the network for LANShare hosts and prints them to stdout.
    """
    print("listing hosts...")

def list_files(hostname):
    """
    Asks a host for a list of it's shared files and prints them to stdout.
    """
    print("Listing files for", hostname)

def get_file(hostname, filename, output=None):
    """
    Gets a filename from hostname and save it as output.
    """
    print("Getting file {0} from {1}".format(filename, hostname))

def usage():
    """
    Print the help message
    """
    print("lanshare help...")

def parse_options(args):
    """
    Read the command line options and call the related function.
    + Serve files
    + List available hosts
    + List files on a host
    + Get a file from a host
    """
    if len(args) == 1:
        list_hosts()
    elif args[1] == "-S":
        if len(sys.argv) > 2:
            serve(args[2])
        else:
            serve()
    elif args[1] == "-h":
        usage()
    elif len(args) == 2:
        list_files(args[1])
    else:
        get_file(args[1], args[2])


if __name__ == "__main__":
    parse_options(sys.argv)

